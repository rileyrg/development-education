#+title: Fluent Python Chapter 1

#+OPTIONS: ^:nil

# don't export trees tagged with:
#+EXCLUDE_TAGS: tasklist noexport broken
# do not export any sections marked as tasks unless TODO or DONE
#+OPTIONS: tasks:("TODO" "DONE")
# do not include task keywords in export
#+OPTIONS: todo:nil

#+PROPERTY: header-args:python  :results output :exports both :session "*python - fluent python chapter 1*"

* FrenchDeck

   #+begin_src python

     import collections

     Card = collections.namedtuple('Card', ['rank', 'suit'])

     class FrenchDeck:

         ranks = [str(n) for n in range(2, 11)] + list('JQKA')
         suits = 'spades diamonds clubs hearts'.split()

         def __init__(self):
             self._cards = [Card(rank, suit) for suit in self.suits for rank in self.ranks]

         def __len__(self):
             return len(self._cards)

         def __getitem__(self, position):
             return self._cards[position]

     if __name__ == "__main__":
         print(FrenchDeck.ranks)
         print(FrenchDeck.suits)
   #+end_src

   #+RESULTS:
   : ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
   : ['spades', 'diamonds', 'clubs', 'hearts']

   Take a peek at a card

   #+begin_src python
     beer_card = Card('7', 'diamonds')
     print(beer_card)
   #+end_src

   #+RESULTS:
   : Card(rank='7', suit='diamonds')

   Did you know len isn't a method?

   #+begin_src python
     print(len(beer_card))
   #+end_src

   #+RESULTS:
   : 2

   Lets create pack

   #+begin_src python
     deck=FrenchDeck()
     print(len(deck))
   #+end_src

   #+RESULTS:
   : 52

   #+begin_src python
     c=deck[1]
     print(c)
   #+end_src

   #+RESULTS:
   : Card(rank='3', suit='spades')

   #+begin_src python
     from random import choice

     print(choice(deck))
   #+end_src

   #+RESULTS:
   : Card(rank='7', suit='spades')

Because our __getitem__ delegates to the [] operator of self._cards , our deck auto‐
matically supports slicing. Here’s how we look at the top three cards from a brand new
deck, and then pick just the aces by starting on index 12 and skipping 13 cards at a time:

#+begin_src python
  print(deck[:3])
  print(deck[12:13])
#+end_src

#+RESULTS:
: [Card(rank='2', suit='spades'), Card(rank='3', suit='spades'), Card(rank='4', suit='spades')]
: [Card(rank='A', suit='spades')]
