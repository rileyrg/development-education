* altering lists with [[info:elisp#Setcar][setcar]]
#+begin_src emacs-lisp
  (setq x '(1 2 3 4))
  (setcar x 4)
  x
#+end_src

#+RESULTS:
| 4 | 2 | 3 | 4 |
* altering nth element
#+begin_src emacs-lisp
  (setq x '(1 2 3 4))
  (setcar (nthcdr 2 x) "xxx")
  x
#+end_src

#+RESULTS:
| 1 | 2 | xxx | 4 |

* adding something to nth element
#+begin_src emacs-lisp
  (let ((v 99)
        (p 3)
        (l '(256 2 3 8)))
    (setcar (nthcdr p l)
            (+ (car (nthcdr 0 l)) v)) l)
#+end_src

#+RESULTS:
| 256 | 2 | 3 | 355 |


* nth
  #+begin_src emacs-lisp
    (let ((n 2)
          (l '(1 2 3 8)))
      (nth n l))
  #+end_src

  #+RESULTS:
  : 3

* plist or property list
#+begin_src emacs-lisp
(setq m-point '(:beg 2811 :end 3018 :op "(" :cl ")" :prefix "" :suffix ""))
(plist-get m-point :beg)
#+end_src

#+RESULTS:
: 2811

* mapcar
  #+begin_src emacs-lisp
    (mapcar '(lambda(a)(+ a 1)) [1 2 3 4])
    (mapcar '1+ [1 2 3 4])
  #+end_src

** CANCELLED figure out why can quote or not quote the lambda     :CANCELLED:
   CLOSED: [2021-03-21 Sun 17:52] SCHEDULED: <2021-03-25 Thu>
   :LOGBOOK:
   - State "CANCELLED"  from "TODO"       [2021-03-21 Sun 17:52]
   - State "TODO"       from "DONE"       [2021-02-08 Mo 10:27]
   - State "DONE"       from              [2021-02-08 Mo 10:27]
   :END:

* symbol plists
  #+begin_src emacs-lisp

    (defun f()
      "a function"
      "func")
    (print (symbol-plist 'f))
    (print (symbol-plist #'f))

    (print (fboundp 'f))
    ;;unbind func f
    (fmakunbound 'f)
    (print (fboundp 'f))

    (defvar f "a variable" "f as a var")
    (print (boundp 'f))

    (print (symbol-plist 'f))

    ;;unbind var f
    (makunbound 'f)
    (print (boundp 'f))
    (print (fboundp 'f))



#+end_src
  #+RESULTS:
  | 4 | 5 | 6 |

* cl structures
  #+begin_src emacs-lisp
    (cl-defstruct lurn-struct "lurn structure" (lurn nil :read-only t) (p "should it be called p") (created (format-time-string "%s") :read-only t) last-read scheduled read-count comfort-factor)
    (setq l (make-lurn-struct :lurn "a"))
    (lurn-structure-
    (print l)
  #+end_src

  #+RESULTS:
  : #s(lurn-struct "a" "should it be called p" "1612834863" nil nil nil nil)

  #+begin_src emacs-lisp
    (setf (lurn-struct-lurn l) "hello")
  #+end_src

  #+begin_src emacs-lisp
    (setf (lurn-struct-last-read l) (format-time-string "%s"))
    (print l)
  #+end_src

  #+RESULTS:
  : #s(lurn-struct "a" "1612834490" "1612834505" nil nil nil)
