* Tasks                                                            :tasklist:

** DONE find out about symbol functions
   CLOSED: [2020-02-14 Fri 10:06] SCHEDULED: <2020-02-07 Fri>
   :PROPERTIES:
   :DateCreated: <2020-02-06 Thu 22:51>
   :END:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-02-14 Fri 10:06]
   - Refiled on [2020-02-06 Thu 22:52] \\
     moved
   :END:
if I (defun f() ...) I can  (funcall 'v) AND (f). But if I (setq f  "hello") and (fset 'f '(lambda() ...) I can't (f). Why is that? In the first case (symbol-function 'f) returns a lambda.
* Variables, Symbols, Functions - as one...
Put the cursor in the code block and hit C-c C-c  : 'org-ctrl-c-ctrl-c . It knows to execute the code in the src block
#+begin_src emacs-lisp
(setq v "the value v")
(defun v() "the function v")
#+end_src

#+RESULTS:
: v

Now this block! Whoops! The VALUE of v is used. And that doesnt have a symbol name!
#+begin_src emacs-lisp
(message "%s" (symbol-value v))
#+end_src
#+RESULTS:

Now quote v...
#+begin_src emacs-lisp
(symbol-name 'v)
#+end_src

#+RESULTS:
: v

But is that really our v? Lets see if the symbol is associated with a value?
#+begin_src emacs-lisp
(symbol-value 'v)
#+end_src

#+RESULTS:
: the value v

It does indeed have a value. But what about our function v?
#+begin_src emacs-lisp
(fboundp 'v)
#+end_src

#+RESULTS:
: t

Yup, 'v is has a function bound to it!
#+begin_src emacs-lisp
(symbol-function 'v)
#+end_src

#+RESULTS:
| lambda | nil | the function v |


Can we release our little symbol from it's functionness?
#+begin_src emacs-lisp
(fmakunbound 'v)
(fboundp 'v)
#+end_src

#+RESULTS:

We can indeed. Lets redefine it,
#+begin_src emacs-lisp
(defun v() "the function v")
(fboundp 'v)
#+end_src

#+RESULTS:
: t

What about it's traditional variable status?
#+begin_src emacs-lisp
(boundp 'v)
#+end_src

#+RESULTS:
: t

It's still bound to a variable value. How to call a function bound to a symbol?
#+begin_src emacs-lisp
(funcall 'v)
#+end_src

#+RESULTS:
: the function v

#+begin_src emacs-lisp
(symbol-function 'v)
#+end_src

#+RESULTS:
| lambda | nil | the function v |

#+begin_src emacs-lisp
(v)
#+end_src

#+RESULTS:
: the function v

Can we assign one symbol's bindings to another? Lets do it and confirm the function binding is transferred!
#+begin_src emacs-lisp
(setq y v)
(funcall y)
#+end_src

No. Hmm.

The value?
#+begin_src emacs-lisp
(symbol-value 'y)
#+end_src

#+RESULTS:
: the value v

The new y var has the value from v ok!

Now lets frankenstein our new y symbol.

#+begin_src emacs-lisp
(put 'v 'prop1 "hello")
#+end_src

#+RESULTS:
: hello

#+begin_src emacs-lisp
(get 'v 'prop1)
#+end_src

#+begin_src emacs-lisp
  (plist-get (symbol-plist 'v) 'prop1)
#+end_src
